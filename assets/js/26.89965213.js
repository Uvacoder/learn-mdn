(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{391:function(t,a,s){"use strict";s.r(a);var e=s(25),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"primitive"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#primitive"}},[t._v("#")]),t._v(" Primitive")]),t._v(" "),s("p",[t._v("In "),s("a",{attrs:{href:""}},[t._v("JavaScript")]),t._v(", a "),s("strong",[t._v("primitive")]),t._v("(primitive value, primitive data type) is data that is not an "),s("a",{attrs:{href:""}},[t._v("object")]),t._v(" and has no "),s("a",{attrs:{href:""}},[t._v("method")]),t._v(". There are 7 primitive data types: "),s("a",{attrs:{href:""}},[t._v("string")]),t._v(","),s("a",{attrs:{href:""}},[t._v("number")]),t._v(","),s("a",{attrs:{href:""}},[t._v("bigint")]),t._v(","),s("a",{attrs:{href:""}},[t._v("boolean")]),t._v(","),s("a",{attrs:{href:""}},[t._v("undefined")]),t._v(","),s("a",{attrs:{href:""}},[t._v("symbol")]),t._v(","),s("a",{attrs:{href:""}},[t._v("null")]),t._v(".")]),t._v(" "),s("p",[t._v("Most of the time, a primitive value is represented directly at the lowest level of the language implementation.")]),t._v(" "),s("p",[t._v("All primitives are "),s("strong",[t._v("immutable")]),t._v(", i.e. ,the cannot be altered.It is important not to confuse a primitive itself with a variable assigned a primitive value, Thee variable may be reassigned a new value, but thee existing value cannot be changed in the ways that objects, array, and functions can be altered.")]),t._v(" "),s("h2",{attrs:{id:"example"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#example"}},[t._v("#")]),t._v(" Example")]),t._v(" "),s("p",[t._v("This example will help you understand that primitive values are "),s("strong",[t._v("immutable")]),t._v(".")]),t._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Using a string method doesn't mutate the string")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" bar "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'baz'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("bar"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// baz")]),t._v("\nbar"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("toUpperCase")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("bar"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// baz")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Using an array method mutates the array")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" foo "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("foo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// []")]),t._v("\nfoo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("push")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'plugh'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("foo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// ["plugh"]')]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Assignment gives the primitive a new (not a mutated) value")]),t._v("\nbar "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" bar"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("toUpperCase")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// BAZ")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br")])]),s("p",[t._v("A primitive can be replaced, but it can't be directly altered.")]),t._v(" "),s("h2",{attrs:{id:"primitive-wrapper-objects-in-javascript"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#primitive-wrapper-objects-in-javascript"}},[t._v("#")]),t._v(" Primitive wrapper objects in JavaScript")]),t._v(" "),s("p",[t._v("Except for "),s("code",[t._v("null")]),t._v(" and "),s("code",[t._v("undefined")]),t._v(", all primitive values have object equivalents that wrap around the primitive values:")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:""}},[t._v("String")]),t._v(" for the string primitive.")]),t._v(" "),s("li",[s("a",{attrs:{href:""}},[t._v("Number")]),t._v(" for the number primitive.")]),t._v(" "),s("li",[s("a",{attrs:{href:""}},[t._v("BigInt")]),t._v(" for the bigint primitive.")]),t._v(" "),s("li",[s("a",{attrs:{href:""}},[t._v("Boolean")]),t._v(" for the boolean primitive.")]),t._v(" "),s("li",[s("a",{attrs:{href:""}},[t._v("Symbol")]),t._v(" for the symbol primitive.")])]),t._v(" "),s("p",[t._v("The wrapper's "),s("a",{attrs:{href:""}},[t._v("valueOf")]),t._v(" method returns the primitive value.")])])}),[],!1,null,null,null);a.default=n.exports}}]);